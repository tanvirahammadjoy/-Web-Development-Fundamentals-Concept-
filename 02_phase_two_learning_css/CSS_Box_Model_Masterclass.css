/* Masterclass on Box Model in CSS
The CSS Box Model is one of the foundational concepts for understanding layout and design in web development. Every HTML element is considered a rectangular box and consists of several layers that determine its size and position within the page. In this masterclass, we’ll dive deep into the CSS box model to give you a clear understanding of its components, behavior, and practical use.

1. The Basics of the CSS Box Model
Every HTML element is composed of four layers (from the inside out):

Content: The actual content of the element, such as text or images.
Padding: The space between the content and the border. Padding is transparent.
Border: A line surrounding the padding (if any) and content. It has a width, style, and color.
Margin: The outermost space, which separates the element from other elements on the page. The margin is also transparent. */

/* visualization: */
/* 
+-----------------------+
|       Margin          |
|   +-----------------+ |
|   |    Border        | |
|   |  +-------------+ | |
|   |  |   Padding   | | |
|   |  | +---------+ | | |
|   |  | | Content | | | |
|   |  | +---------+ | | |
|   |  +-------------+ | |
|   +-----------------+ |
+-----------------------+
 */
/* 
2. Box Model Properties
Here’s a breakdown of the CSS properties associated with the box model:

Width and Height:

Defines the size of the content box, excluding padding, border, and margin.
width: 200px;
height: 100px;

Padding:
Controls the space between the content and the border.

padding: 10px;  // Applies the same padding on all sides
padding: 10px 20px; // Top/Bottom: 10px, Left/Right: 20px
padding-top: 10px;
padding-right: 20px;
padding-bottom: 10px;
padding-left: 20px;

Border:
Encapsulates the padding and content. You can control the width, style, and color.
border: 2px solid black;
/ Individual sides /
border-top: 2px solid black;
border-right: 2px solid black;
border-bottom: 2px solid black;
border-left: 2px solid black;

Margin:

Adds space outside the border. It’s important for controlling the spacing between elements.
margin: 20px;  /* Applies the same margin on all sides
margin-top: 10px;
margin-right: 15px;
margin-bottom: 10px;
margin-left: 15px;
*/

/* 
3. Box Sizing: Content-Box vs Border-Box
The box-sizing property determines how the width and height of elements are calculated.

content-box (default):

The width and height are applied only to the content box. Padding, borders, and margins are added to this size.
box-sizing: content-box;

border-box:
The width and height include padding and border, meaning the element’s size remains the same regardless of the padding or border applied.
box-sizing: border-box;

Example:
If an element has a width of 100px and a padding of 10px:

content-box: The element’s total width will be 120px (100px content + 10px padding left + 10px padding right).
border-box: The element’s total width remains 100px, but the content area shrinks to accommodate padding and border.

*/
/* 4. Margin Collapsing
Margins between block elements may collapse into a single margin. This typically happens with vertical margins (top and bottom).

Example:
<div class="box-1"></div>
<div class="box-2"></div>
*/

.box-1 {
  margin-bottom: 20px;
}
.box-2 {
  margin-top: 10px;
}

/* Here, instead of the total margin being 30px (20px bottom + 10px top),  */
/* the browser will collapse the margin to 20px, taking the larger of the two values. */

/* 5. Padding and Margin Behavior
Padding:
Adds space inside the element between its content and the border. Padding does not affect other elements.
You cannot have a negative padding value.
Margin:
Adds space outside the element and can affect other elements around it.
Margins can have negative values, which pull elements closer together or even cause them to overlap.

6. Overflow and Scrolling
When the content of a box exceeds its defined width or height, you can control how the overflow is handled with the overflow property.

overflow: visible (default): Content overflows the box.
overflow: hidden: Content outside the box is hidden.
overflow: scroll: Scrollbars appear, regardless of whether the content exceeds the box.
overflow: auto: Scrollbars appear only if necessary.
Example:
*/
.box {
  width: 200px;
  height: 100px;
  overflow: auto;
}
/* 
7. Practical Use Case: Centering an Element
To center an element within its parent horizontally using margins:

.box {
  width: 300px;
  margin: 0 auto; * Top/Bottom: 0, Left/Right: auto *
}

This centers the .box horizontally in its parent container.
For vertical centering, you may need flexbox or grid, as the box model alone doesn’t handle vertical centering well.
*/

/* 8. Box Model in Different Display Modes
The behavior of the box model can change depending on the display property of the element.

Block-level elements: Take up the full width of the parent container by default.
Inline elements: Only take up as much width as necessary to fit their content. */

/* 9. Practical Layout Example
Let’s put everything into practice with a simple layout example.
<div class="container">
  <div class="box"></div>
  <div class="box"></div>
</div>


HTML: */

.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.box {
  width: 300px;
  height: 200px;
  margin: 20px;
  padding: 10px;
  border: 5px solid black;
  background-color: lightgray;
}

/* In this example:

The .container is centered on the page with margin: 0 auto;.
Each .box has a width of 300px, a height of 200px, and includes padding, borders, and margins to demonstrate how space is calculated.
*/
/* 
10. Responsive Box Model
In modern web development, responsive design is critical. The box model behaves differently on smaller screens unless you use relative units like percentages or vw/vh for sizes and padding.

Example: */
.box {
  width: 80vw; /* 80% of the viewport width */
  height: auto;
  padding: 5vw;
}

/* This allows the box to adjust its size based on the size of the viewport. */

/* Conclusion */
/* Mastering the CSS box model is essential for building layouts and controlling the spacing and sizing of elements on your webpage.
By understanding the relationships between content, padding, borders,
and margins—and how to adjust them using the box-sizing property—you gain greater control over the design and responsiveness of your web applications.
*/
