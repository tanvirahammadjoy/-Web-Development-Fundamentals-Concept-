/* CSS Master Class: Mastering position in CSS
The position property in CSS controls how elements are positioned on a web page. It determines how an element is placed relative to its containing elements or the browser window. Understanding position helps create flexible, responsive layouts.

Types of Positioning in CSS
Static Positioning (default)
Relative Positioning
Absolute Positioning
Fixed Positioning
Sticky Positioning
1. Static Positioning (position: static)
By default, every HTML element is statically positioned. This means the element is placed in the normal document flow and does not respond to top, right, bottom, or left properties.

Example: */
.element {
  position: static; /* Default positioning */
}
/* In static position, the element behaves normally in the document flow, 
meaning it will be placed according to the order in the DOM and will not change its position. */

/* 
2. Relative Positioning (position: relative)
Elements with relative positioning are moved relative to their original position in the normal document flow. The top, right, bottom, or left properties can offset the element's position.

The space the element would have occupied is still reserved in the document flow.
You can move the element without affecting its neighboring elements.
Example: 
*/
.element {
  position: relative;
  top: 20px; /* Moves 20px down from its original position */
  left: 30px; /* Moves 30px right */
}
/* Key Points:

The element stays in the normal flow.
Other elements around it are unaffected by the movement. */

/* 3. Absolute Positioning (position: absolute)
absolute positioning removes the element from the normal document flow. The element is then positioned relative to its nearest positioned ancestor (an element with relative, absolute, or fixed position).

If no ancestor is positioned, the element will be positioned relative to the initial containing block (the <html> element or the viewport).
Example: */
.parent {
  position: relative; /* Parent is relatively positioned */
}

.child {
  position: absolute;
  top: 10px; /* 10px from the top of the parent */
  left: 50px; /* 50px from the left of the parent */
}
/* 
Key Points:

The element is taken out of the normal flow.
It does not affect the positioning of other elements.
It is positioned relative to the closest ancestor with position: relative, absolute, or fixed. */
/* 
4. Fixed Positioning (position: fixed)
fixed positioning behaves similarly to absolute positioning, but the element is positioned relative to the browser window (viewport) and remains in place even when the page is scrolled.

Example: */
.header {
  position: fixed;
  top: 0;
  width: 100%; /* Stretches across the top of the viewport */
}
/* Key Points:

The element is removed from the document flow.
It stays fixed relative to the viewport, unaffected by scrolling.
Useful for sticky headers, sidebars, or floating action buttons.
*/
/* 
5. Sticky Positioning (position: sticky)
sticky positioning is a hybrid of relative and fixed. The element is treated as relative until it crosses a threshold (based on top, bottom, left, or right), at which point it becomes fixed.

Example: */
.section-title {
  position: sticky;
  top: 20px; /* Sticks when the element reaches 20px from the top of the viewport */
}
/* Key Points:

It starts out as relative and behaves normally in the flow.
When the user scrolls, it "sticks" to the viewport when it reaches the defined position.
Often used for headers or navigation menus that should become sticky as the user scrolls. */
/* Combining Position Properties
You can combine different position values with top, right, bottom, or left to achieve precise control over the layout.

Example:
<div class="container">
  <div class="box1"></div>
  <div class="box2"></div>
  <div class="box3"></div>
  </div>
*/
.container {
  position: relative; /* Sets container as positioned ancestor */
  height: 400px;
}

.box1 {
  position: absolute;
  top: 10px;
  left: 10px;
  width: 100px;
  height: 100px;
  background-color: lightblue;
}

.box2 {
  position: absolute;
  bottom: 10px;
  right: 10px;
  width: 100px;
  height: 100px;
  background-color: lightgreen;
}

.box3 {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  width: 100px;
  height: 100px;
  background-color: coral;
}
/* In this example:

box1 is positioned at the top left of the container.
box2 is positioned at the bottom right of the container.
box3 stays fixed to the viewport even when scrolling.
 */

/* Positioning Tips */
/* Z-Index: Elements with position values other than static can use the z-index property to stack elements.
Elements with a higher z-index value will appear above those with a lower value. */

.element {
  position: absolute;
  z-index: 10; /* Element appears on top of others with lower z-index */
}
/* 
Avoid Overusing Absolute Positioning: While absolute positioning can give you precise control, overusing it can break responsive layouts. Use it sparingly for small, isolated parts of the design, like icons or buttons.

Positioning for Responsiveness: Use percentage values for positioning and width to make elements adapt better to screen size. For example, top: 10% moves the element 10% from the top of its container.

Practical Uses of position
Creating Sticky Navigation Bars
Building Modals and Overlays
Tooltips and Popovers
Positioning Banners, Headers, and Footers
Aligning Elements in Responsive Grids
Exercises:
Sticky Navigation Bar: Create a navigation bar that sticks to the top of the viewport when the user scrolls down.
Centered Modal: Build a modal that centers itself horizontally and vertically using absolute or fixed positioning.
Tooltip: Create a tooltip that appears on hover, using absolute positioning to place it near an element.
*/
/* Mastering position in CSS will give you powerful tools to control layouts and responsiveness in web design.
Each position type has its strengths depending on the use case, so experiment and get comfortable with positioning elements in dynamic ways! */
