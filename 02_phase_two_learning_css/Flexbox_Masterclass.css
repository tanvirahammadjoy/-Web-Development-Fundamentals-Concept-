/* To master CSS Flexbox, let’s break it down into a structured guide that covers the essential concepts and use cases of Flexbox, focusing on the main properties and behaviors. Here’s a step-by-step CSS Flexbox Masterclass:

1. Introduction to Flexbox
Flexbox is a layout model that allows you to easily align and distribute space among items in a container. It’s especially useful when creating complex layouts without relying on floats or positioning.

Flex Container: The parent element with display: flex; that wraps the flex items.
Flex Items: The child elements inside a flex container. */

/* 1. Introduction to Flexbox
Flexbox is a layout model that allows you to easily align and distribute space among items in a container. It’s especially useful when creating complex layouts without relying on floats or positioning.

Flex Container: The parent element with display: flex; that wraps the flex items.
Flex Items: The child elements inside a flex container.
*/

/* 2. Basic Flexbox Setup */
/* To use Flexbox, start by defining a container with display: flex;. */
.flex-container {
  display: flex;
  border: 1px solid black;
}

.item {
  padding: 20px;
  border: 1px solid blue;
}

/* 3. Flexbox Axis System
Flexbox has two main axes:

Main Axis: The primary axis along which flex items are arranged (default is horizontal, left to right).
Cross Axis: Perpendicular to the main axis (default is vertical, top to bottom).

4. Main Axis Control with (flex-direction)
The flex-direction property defines the direction in which the flex items are placed.

row (default): Items arranged horizontally.
row-reverse: Items arranged horizontally, but in reverse order.
column: Items arranged vertically.
column-reverse: Items arranged vertically, but in reverse order. */

.flex-container {
  display: flex;
  flex-direction: row; /* default is row */
}

/* 5. Spacing and Alignment Along Main Axis (justify-content)
The justify-content property controls the alignment of items along the main axis.

flex-start: Items aligned at the start of the container.
flex-end: Items aligned at the end.
center: Items centered along the main axis.
space-between: Evenly distributed with space between items.
space-around: Even distribution with space around items. */
.flex-container {
  justify-content: center; /* center items on the main axis */
}

/* 6. Alignment Along Cross Axis (align-items)
The align-items property aligns the items along the cross axis.

stretch (default): Items stretch to fill the container along the cross axis.
flex-start: Items align at the start of the cross axis.
flex-end: Items align at the end.
center: Items center on the cross axis.
baseline: Aligns items along the text baseline. */
.flex-container {
  align-items: center; /* center items on the cross axis */
}

/* 7. Aligning Flex Container’s Cross Axis (align-content)
If there is extra space on the cross axis (e.g., when wrapping is allowed), align-content distributes that space.

flex-start, flex-end, center, space-between, space-around, stretch. */
.flex-container {
  align-content: space-around; /* distribute cross-axis space */
}

/* 8. Flexbox Wrapping (flex-wrap)
By default, items are placed in a single line. Use flex-wrap to wrap items into multiple lines.

nowrap (default): No wrapping, items stay on one line.
wrap: Wrap items into multiple lines.
wrap-reverse: Wrap items into multiple lines but in reverse order. */
.flex-container {
  flex-wrap: wrap;
}

/* 9. Controlling Item Size and Growth (flex-grow, flex-shrink, flex-basis)
These properties control how items behave in terms of size relative to each other:

flex-grow: Defines the ability for an item to grow relative to the rest.
flex-shrink: Defines the ability for an item to shrink if needed.
flex-basis: Sets the initial size of the item before space distribution.
Example: Make the first item grow more than others: */
.item:first-child {
  flex-grow: 2; /* Item 1 grows twice as much as others */
}

/* 10. Controlling Individual Item Alignment (align-self)
Overrides align-items for specific flex items.

auto, flex-start, flex-end, center, baseline, stretch. */
.item:nth-child(2) {
  align-self: flex-end; /* Align this item to the bottom */
}

/* 11. Combining Properties: Complete Example */
.flex-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  height: 300px;
}

.item {
  padding: 20px;
  border: 1px solid blue;
  flex-basis: 30%;
  flex-grow: 1;
}

/* 12. Practical Flexbox Layouts
A. Navbar */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-links {
  display: flex;
  list-style: none;
}

/* B. Two-column Layout */
.two-column {
  display: flex;
}

.sidebar {
  flex-basis: 20%;
}

.main-content {
  flex-basis: 80%;
}

/* 13. Debugging Flexbox Layouts
Use browser DevTools to inspect and visualize flex containers and items:

Chrome and Firefox have Flexbox visualizations to help you understand alignment, sizing, and spacing.
14. Summary of Key Concepts
Flex Container Properties:
display: flex;
flex-direction, justify-content, align-items, flex-wrap, align-content.
Flex Item Properties:
flex-grow, flex-shrink, flex-basis, align-self.
Mastering these properties will allow you to create powerful, responsive layouts that adapt to different screen sizes and design needs. */
