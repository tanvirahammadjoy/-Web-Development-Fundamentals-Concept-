/*
Creating a CSS Responsive Master Class involves covering the foundational concepts of responsive design, key techniques, and advanced strategies. Below is an outline of a comprehensive masterclass that can help you understand and implement responsive design in CSS.

CSS Responsive Master Class
Part 1: Introduction to Responsive Design
1.1 What is Responsive Design?
Definition: Designing web pages that look good on all devices and screen sizes.
Importance: Enhances user experience, improves accessibility, and is essential for SEO.
1.2 Core Principles of Responsive Design
Fluid Layouts: Using percentage-based widths for layout elements instead of fixed pixel values.
Flexible Images: Ensuring images scale based on the viewport.
Media Queries: Applying CSS rules based on device characteristics, primarily viewport width.
*/
/*
Part 2: Fluid Layouts with Flexbox & Grid
2.1 Flexbox for Responsive Layouts
Overview: A one-dimensional layout model.
Flexbox properties:
display: flex;
flex-direction, justify-content, align-items, and flex-wrap.
Example: Basic responsive navigation bar
*/
nav {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}
/*
2.2 CSS Grid for Complex Layouts
Overview: A two-dimensional layout model.
Grid properties:
display: grid;
grid-template-columns, grid-template-rows, grid-gap.
Example: Responsive grid layout
*/
.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 10px;
}
/* 
Part 3: Media Queries
3.1 Introduction to Media Queries
Syntax:
*/
@media (max-width: 600px) {
  /* CSS rules for devices with a max width of 600px */
}
/* Usage: Target different screen sizes (mobile, tablet, desktop). */
/*
3.2 Breakpoints Best Practices
Mobile-first design: Start by designing for mobile, then scale up using media queries.
Common breakpoints:
max-width: 600px (Mobile)
max-width: 768px (Tablets)
max-width: 1024px (Desktops)
*/
/*
Part 4: Responsive Typography
4.1 Relative Units for Font Sizing
Use em, rem, or vw instead of pixels.
Example of scalable font sizes:
*/
body {
  font-size: 2vw;
}

/* 
4.2 Fluid Typography with clamp()
Overview: A function that dynamically scales typography between a minimum and maximum size.
*/
h1 {
  font-size: clamp(1.5rem, 4vw, 3rem);
}
/* 
Part 5: Flexible Images & Media
5.1 Responsive Images
Use of max-width:
*/
img {
  max-width: 100%;
  height: auto;
}
/* 
5.2 CSS Object-Fit Property for Image Handling
Properties:
object-fit: cover; for images to fill their container.
object-position for controlling how the image is placed inside its container.
*/

/* 
Part 6: Advanced Techniques
6.1 CSS Variables for Responsiveness
Usage: Define breakpoints and sizes using CSS custom properties (variables).
*/
:root {
  --main-width: 90%;
}
body {
  width: var(--main-width);
}
/*
6.2 Container Queries (Future of Responsive Design)
Overview: Allows styling based on the containerâ€™s size rather than the viewport.
*/

/* 
@container (min-width: 500px) {
  /* Container-specific styles
}
*/

/* 
6.3 Responsive Design with Flexbox and Grid Integration
Flexbox inside Grid: Build complex layouts where a grid is the main structure, and Flexbox handles smaller sections.
 */
.grid-container {
  display: grid;
  grid-template-columns: 1fr 3fr;
}

.flex-item {
  display: flex;
  flex-direction: column;
}
/* 
Part 7: Testing and Optimization
7.1 Browser Dev Tools
Use developer tools to test responsiveness by simulating different devices.
7.2 Performance Optimization
Minify CSS for faster load times.
Use loading="lazy" for images to improve page speed.
7.3 Accessibility Considerations
Ensure buttons, links, and inputs are touch-friendly on mobile devices (larger tap targets).
Test designs using screen readers for accessibility.
 */
/* 
Part 8: Project
8.1 Build a Responsive Portfolio Website
Header: Responsive navigation using Flexbox.
Grid Layout: Use CSS Grid for a gallery section.
Media Queries: Implement breakpoints for mobile, tablet, and desktop.
Fluid Typography: Apply clamp() for responsive headings and body text.
Sample Structure:
*/
/*
<header>
  <!-- Flexbox for responsive nav -->
</header>
<section class="grid-gallery">
  <!-- Grid-based gallery -->
</section>
*/
/*
Key Takeaways
Responsive design is essential for modern web development.
Master Flexbox, Grid, and Media Queries for flexible, scalable designs.
Test your designs across multiple devices and optimize for performance.
*/
