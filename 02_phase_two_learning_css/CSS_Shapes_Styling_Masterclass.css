/* CSS Masterclass: Styling and Creating Different Types of Shapes */
/* In this masterclass, we'll explore how to create a variety of shapes using CSS.
You’ll learn to create geometric shapes such as squares, circles, triangles, stars, and more, without the need for any images.
By the end, you’ll have the ability to use these shapes in creative web designs. */
/* 
1. Basic Shapes: Squares and Rectangles
Squares and rectangles are the simplest shapes to create in CSS. They can be styled using width, height, and background-color.
*/
/* Example: Square */
.square {
  width: 100px;
  height: 100px;
  background-color: #3498db;
}

/* Example: Rectangle */
.rectangle {
  width: 200px;
  height: 100px;
  background-color: #e74c3c;
}
/* 
2. Circles and Ovals
Creating circles and ovals requires using the border-radius property. For a perfect circle, the border-radius should be set to 50%.

Example: Circle
*/
.circle {
  width: 100px;
  height: 100px;
  background-color: #2ecc71;
  border-radius: 50%;
}
/* Example: Oval */
.oval {
  width: 150px;
  height: 100px;
  background-color: #f1c40f;
  border-radius: 50%;
}
/* 
3. Triangles
Triangles are a bit tricky because they use the border property. You create a triangle by making three of the borders transparent and giving the fourth a solid color.

Example: Triangle (pointing up)
*/
.triangle {
  width: 0;
  height: 0;
  border-left: 50px solid transparent;
  border-right: 50px solid transparent;
  border-bottom: 100px solid #9b59b6;
}

/* Example: Triangle (pointing down) */
.triangle-down {
  width: 0;
  height: 0;
  border-left: 50px solid transparent;
  border-right: 50px solid transparent;
  border-top: 100px solid #e67e22;
}
/* 
4. Stars
Stars can be created using a combination of CSS shapes and transform properties for rotation.

Example: 5-Point Star
<div class="star"></div>
*/
.star {
  position: relative;
  display: block;
  margin: 50px;
  width: 0;
  height: 0;
  border-right: 100px solid transparent;
  border-bottom: 70px solid #f39c12;
  border-left: 100px solid transparent;
  transform: rotate(35deg);
}

.star:before {
  border-bottom: 80px solid #f39c12;
  border-left: 30px solid transparent;
  border-right: 30px solid transparent;
  position: absolute;
  height: 0;
  width: 0;
  top: -45px;
  left: -65px;
  display: block;
  content: "";
  transform: rotate(-35deg);
}
/* 5. Pentagon, Hexagon, and Other Polygons
CSS clip-path allows you to create complex polygon shapes like pentagons, hexagons, and more.

Example: Pentagon */
.pentagon {
  width: 100px;
  height: 100px;
  background-color: #8e44ad;
  clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
}
/* Example: Hexagon */
.hexagon {
  width: 100px;
  height: 100px;
  background-color: #27ae60;
  clip-path: polygon(25% 6%, 75% 6%, 100% 50%, 75% 94%, 25% 94%, 0% 50%);
}
/* 
6. Semi-Circles and Quarter Circles
Semi-circles and quarter circles can be made by applying border-radius to half of a square or a circle.

Example: Semi-Circle
*/
.semi-circle {
  width: 100px;
  height: 50px;
  background-color: #e74c3c;
  border-radius: 100px 100px 0 0;
}
/* Example: Quarter Circle */
.quarter-circle {
  width: 100px;
  height: 100px;
  background-color: #3498db;
  border-radius: 0 100px 0 0;
}
/* 
7. Heart Shape
The heart shape is a combination of circles and rotated squares.

Example: Heart
*/
.heart {
  position: relative;
  width: 100px;
  height: 100px;
  background-color: #e74c3c;
  transform: rotate(-45deg);
}

.heart:before,
.heart:after {
  content: "";
  position: absolute;
  width: 100px;
  height: 100px;
  background-color: #e74c3c;
  border-radius: 50%;
  top: 0;
  left: 50px;
}

.heart:after {
  left: 0;
  top: -50px;
}
/* 
8. CSS Shapes with ::before and ::after Pseudo-Elements
Using ::before and ::after, you can add extra shapes to your elements. This is useful for more complex designs, like creating shapes with additional details.

Example: Arrow (with pseudo-elements)
*/
.arrow {
  position: relative;
  width: 100px;
  height: 20px;
  background-color: #3498db;
}

.arrow:after {
  content: "";
  position: absolute;
  right: -30px;
  top: 0;
  width: 0;
  height: 0;
  border-left: 30px solid #3498db;
  border-top: 10px solid transparent;
  border-bottom: 10px solid transparent;
}
/* 
9. Combining Multiple Shapes
By combining different shapes, you can create more complex elements like icons, loaders, and decorative elements.

Example: Complex Loader
*/
.loader {
  display: inline-block;
  width: 50px;
  height: 50px;
  border: 3px solid rgba(0, 0, 0, 0.3);
  border-radius: 50%;
  border-top-color: #2ecc71;
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}
/* Conclusion */
/* CSS gives you the power to create a variety of shapes without images or additional graphic elements.
You can make simple or complex shapes just by using properties like border-radius, clip-path, and transform.
This skill is essential for modern web design, and mastering it will allow you to create dynamic and visually appealing websites.*/
